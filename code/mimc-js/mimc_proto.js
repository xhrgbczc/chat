/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.Appinfo');
goog.provide('proto.ErrorCode');
goog.provide('proto.FeInfo');
goog.provide('proto.FilterRequest');
goog.provide('proto.FilterResponse');
goog.provide('proto.MIMCGroup');
goog.provide('proto.MIMCP2PMessage');
goog.provide('proto.MIMCP2TMessage');
goog.provide('proto.MIMCPacket');
goog.provide('proto.MIMCPacketAck');
goog.provide('proto.MIMCPacketList');
goog.provide('proto.MIMCPull');
goog.provide('proto.MIMCSequenceAck');
goog.provide('proto.MIMCUser');
goog.provide('proto.MIMC_MSG_TYPE');
goog.provide('proto.P2PPushMesage');
goog.provide('proto.P2TPushMesage');
goog.provide('proto.PullMessageRequest');
goog.provide('proto.QueryAppinfoRequest');
goog.provide('proto.TopicMessage');
goog.provide('proto.UCDismiss');
goog.provide('proto.UCExchange');
goog.provide('proto.UCGroup');
goog.provide('proto.UCJoin');
goog.provide('proto.UCJoinResp');
goog.provide('proto.UCMessage');
goog.provide('proto.UCMessageList');
goog.provide('proto.UCPacket');
goog.provide('proto.UCPing');
goog.provide('proto.UCPushMessage');
goog.provide('proto.UCQueryOnlineUsers');
goog.provide('proto.UCQueryOnlineUsersResp');
goog.provide('proto.UCQuit');
goog.provide('proto.UCQuitResp');
goog.provide('proto.UCSequenceAck');
goog.provide('proto.UC_MSG_TYPE');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FilterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FilterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FilterRequest.displayName = 'proto.FilterRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FilterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.FilterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FilterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FilterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    packet: (f = msg.getPacket()) && proto.MIMCPacket.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FilterRequest}
 */
proto.FilterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FilterRequest;
  return proto.FilterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FilterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FilterRequest}
 */
proto.FilterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.MIMCPacket;
      reader.readMessage(value,proto.MIMCPacket.deserializeBinaryFromReader);
      msg.setPacket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FilterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FilterRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FilterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FilterRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPacket();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MIMCPacket.serializeBinaryToWriter
    );
  }
};


/**
 * required string id = 1;
 * @return {string}
 */
proto.FilterRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.FilterRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.FilterRequest.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FilterRequest.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required MIMCPacket packet = 2;
 * @return {!proto.MIMCPacket}
 */
proto.FilterRequest.prototype.getPacket = function() {
  return /** @type{!proto.MIMCPacket} */ (
    jspb.Message.getWrapperField(this, proto.MIMCPacket, 2, 1));
};


/** @param {!proto.MIMCPacket} value */
proto.FilterRequest.prototype.setPacket = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.FilterRequest.prototype.clearPacket = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FilterRequest.prototype.hasPacket = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FilterResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FilterResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FilterResponse.displayName = 'proto.FilterResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FilterResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.FilterResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FilterResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FilterResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    type: jspb.Message.getField(msg, 2),
    errorcode: jspb.Message.getField(msg, 3),
    isfilter: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FilterResponse}
 */
proto.FilterResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FilterResponse;
  return proto.FilterResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FilterResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FilterResponse}
 */
proto.FilterResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.MIMC_MSG_TYPE} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {!proto.ErrorCode} */ (reader.readEnum());
      msg.setErrorcode(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsfilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FilterResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FilterResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FilterResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FilterResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!proto.MIMC_MSG_TYPE} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!proto.ErrorCode} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * required string id = 1;
 * @return {string}
 */
proto.FilterResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.FilterResponse.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.FilterResponse.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FilterResponse.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MIMC_MSG_TYPE type = 2;
 * @return {!proto.MIMC_MSG_TYPE}
 */
proto.FilterResponse.prototype.getType = function() {
  return /** @type {!proto.MIMC_MSG_TYPE} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {!proto.MIMC_MSG_TYPE} value */
proto.FilterResponse.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.FilterResponse.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FilterResponse.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ErrorCode errorCode = 3;
 * @return {!proto.ErrorCode}
 */
proto.FilterResponse.prototype.getErrorcode = function() {
  return /** @type {!proto.ErrorCode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.ErrorCode} value */
proto.FilterResponse.prototype.setErrorcode = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.FilterResponse.prototype.clearErrorcode = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FilterResponse.prototype.hasErrorcode = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool isFilter = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.FilterResponse.prototype.getIsfilter = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.FilterResponse.prototype.setIsfilter = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.FilterResponse.prototype.clearIsfilter = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FilterResponse.prototype.hasIsfilter = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PullMessageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PullMessageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PullMessageRequest.displayName = 'proto.PullMessageRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PullMessageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PullMessageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PullMessageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PullMessageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getField(msg, 1),
    resource: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PullMessageRequest}
 */
proto.PullMessageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PullMessageRequest;
  return proto.PullMessageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PullMessageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PullMessageRequest}
 */
proto.PullMessageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PullMessageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PullMessageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PullMessageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PullMessageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required uint64 uuid = 1;
 * @return {string}
 */
proto.PullMessageRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.PullMessageRequest.prototype.setUuid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.PullMessageRequest.prototype.clearUuid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PullMessageRequest.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string resource = 2;
 * @return {string}
 */
proto.PullMessageRequest.prototype.getResource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.PullMessageRequest.prototype.setResource = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.PullMessageRequest.prototype.clearResource = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PullMessageRequest.prototype.hasResource = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TopicMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TopicMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TopicMessage.displayName = 'proto.TopicMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TopicMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.TopicMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TopicMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TopicMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    topicid: jspb.Message.getField(msg, 1),
    packet: (f = msg.getPacket()) && proto.MIMCPacket.toObject(includeInstance, f),
    uuid: jspb.Message.getField(msg, 3),
    resource: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TopicMessage}
 */
proto.TopicMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TopicMessage;
  return proto.TopicMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TopicMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TopicMessage}
 */
proto.TopicMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setTopicid(value);
      break;
    case 2:
      var value = new proto.MIMCPacket;
      reader.readMessage(value,proto.MIMCPacket.deserializeBinaryFromReader);
      msg.setPacket(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUuid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setResource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TopicMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TopicMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TopicMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TopicMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getPacket();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MIMCPacket.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64String(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required uint64 topicId = 1;
 * @return {string}
 */
proto.TopicMessage.prototype.getTopicid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.TopicMessage.prototype.setTopicid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TopicMessage.prototype.clearTopicid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TopicMessage.prototype.hasTopicid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required MIMCPacket packet = 2;
 * @return {!proto.MIMCPacket}
 */
proto.TopicMessage.prototype.getPacket = function() {
  return /** @type{!proto.MIMCPacket} */ (
    jspb.Message.getWrapperField(this, proto.MIMCPacket, 2, 1));
};


/** @param {!proto.MIMCPacket} value */
proto.TopicMessage.prototype.setPacket = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.TopicMessage.prototype.clearPacket = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TopicMessage.prototype.hasPacket = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 uuid = 3;
 * @return {string}
 */
proto.TopicMessage.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/** @param {string} value */
proto.TopicMessage.prototype.setUuid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.TopicMessage.prototype.clearUuid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TopicMessage.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string resource = 4;
 * @return {string}
 */
proto.TopicMessage.prototype.getResource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.TopicMessage.prototype.setResource = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.TopicMessage.prototype.clearResource = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TopicMessage.prototype.hasResource = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.QueryAppinfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.QueryAppinfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.QueryAppinfoRequest.displayName = 'proto.QueryAppinfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.QueryAppinfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.QueryAppinfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.QueryAppinfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QueryAppinfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appid: jspb.Message.getField(msg, 1),
    context: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.QueryAppinfoRequest}
 */
proto.QueryAppinfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.QueryAppinfoRequest;
  return proto.QueryAppinfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.QueryAppinfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.QueryAppinfoRequest}
 */
proto.QueryAppinfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAppid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.QueryAppinfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.QueryAppinfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.QueryAppinfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QueryAppinfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required uint64 appId = 1;
 * @return {string}
 */
proto.QueryAppinfoRequest.prototype.getAppid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.QueryAppinfoRequest.prototype.setAppid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.QueryAppinfoRequest.prototype.clearAppid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.QueryAppinfoRequest.prototype.hasAppid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string context = 2;
 * @return {string}
 */
proto.QueryAppinfoRequest.prototype.getContext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.QueryAppinfoRequest.prototype.setContext = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.QueryAppinfoRequest.prototype.clearContext = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.QueryAppinfoRequest.prototype.hasContext = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Appinfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Appinfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Appinfo.displayName = 'proto.Appinfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Appinfo.prototype.toObject = function(opt_includeInstance) {
  return proto.Appinfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Appinfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Appinfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    appid: jspb.Message.getField(msg, 1),
    msgcallbackurl: jspb.Message.getField(msg, 2),
    offlinemsgcallbackurl: jspb.Message.getField(msg, 3),
    uuidttl: jspb.Message.getField(msg, 4),
    context: jspb.Message.getField(msg, 5),
    messagefilter: jspb.Message.getField(msg, 6),
    ucmsgcallbackurl: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Appinfo}
 */
proto.Appinfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Appinfo;
  return proto.Appinfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Appinfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Appinfo}
 */
proto.Appinfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAppid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsgcallbackurl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOfflinemsgcallbackurl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setUuidttl(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContext(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessagefilter(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUcmsgcallbackurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Appinfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Appinfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Appinfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Appinfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64String(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * required uint64 appId = 1;
 * @return {string}
 */
proto.Appinfo.prototype.getAppid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.Appinfo.prototype.setAppid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Appinfo.prototype.clearAppid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Appinfo.prototype.hasAppid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string msgCallbackUrl = 2;
 * @return {string}
 */
proto.Appinfo.prototype.getMsgcallbackurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Appinfo.prototype.setMsgcallbackurl = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Appinfo.prototype.clearMsgcallbackurl = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Appinfo.prototype.hasMsgcallbackurl = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string offlineMsgCallbackUrl = 3;
 * @return {string}
 */
proto.Appinfo.prototype.getOfflinemsgcallbackurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Appinfo.prototype.setOfflinemsgcallbackurl = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Appinfo.prototype.clearOfflinemsgcallbackurl = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Appinfo.prototype.hasOfflinemsgcallbackurl = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 uuidTTL = 4;
 * @return {string}
 */
proto.Appinfo.prototype.getUuidttl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/** @param {string} value */
proto.Appinfo.prototype.setUuidttl = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Appinfo.prototype.clearUuidttl = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Appinfo.prototype.hasUuidttl = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string context = 5;
 * @return {string}
 */
proto.Appinfo.prototype.getContext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Appinfo.prototype.setContext = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.Appinfo.prototype.clearContext = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Appinfo.prototype.hasContext = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string messageFilter = 6;
 * @return {string}
 */
proto.Appinfo.prototype.getMessagefilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.Appinfo.prototype.setMessagefilter = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.Appinfo.prototype.clearMessagefilter = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Appinfo.prototype.hasMessagefilter = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string ucMsgCallbackUrl = 7;
 * @return {string}
 */
proto.Appinfo.prototype.getUcmsgcallbackurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.Appinfo.prototype.setUcmsgcallbackurl = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.Appinfo.prototype.clearUcmsgcallbackurl = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Appinfo.prototype.hasUcmsgcallbackurl = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MIMCPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MIMCPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MIMCPacket.displayName = 'proto.MIMCPacket';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MIMCPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.MIMCPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MIMCPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MIMCPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    packetid: jspb.Message.getField(msg, 1),
    pb_package: jspb.Message.getField(msg, 2),
    sequence: jspb.Message.getField(msg, 3),
    type: jspb.Message.getField(msg, 4),
    payload: msg.getPayload_asB64(),
    timestamp: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MIMCPacket}
 */
proto.MIMCPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MIMCPacket;
  return proto.MIMCPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MIMCPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MIMCPacket}
 */
proto.MIMCPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPacketid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPackage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setSequence(value);
      break;
    case 4:
      var value = /** @type {!proto.MIMC_MSG_TYPE} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MIMCPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MIMCPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MIMCPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MIMCPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64String(
      3,
      f
    );
  }
  f = /** @type {!proto.MIMC_MSG_TYPE} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt64String(
      6,
      f
    );
  }
};


/**
 * optional string packetId = 1;
 * @return {string}
 */
proto.MIMCPacket.prototype.getPacketid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.MIMCPacket.prototype.setPacketid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MIMCPacket.prototype.clearPacketid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCPacket.prototype.hasPacketid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string package = 2;
 * @return {string}
 */
proto.MIMCPacket.prototype.getPackage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MIMCPacket.prototype.setPackage = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MIMCPacket.prototype.clearPackage = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCPacket.prototype.hasPackage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 sequence = 3;
 * @return {string}
 */
proto.MIMCPacket.prototype.getSequence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/** @param {string} value */
proto.MIMCPacket.prototype.setSequence = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MIMCPacket.prototype.clearSequence = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCPacket.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional MIMC_MSG_TYPE type = 4;
 * @return {!proto.MIMC_MSG_TYPE}
 */
proto.MIMCPacket.prototype.getType = function() {
  return /** @type {!proto.MIMC_MSG_TYPE} */ (jspb.Message.getFieldWithDefault(this, 4, 1));
};


/** @param {!proto.MIMC_MSG_TYPE} value */
proto.MIMCPacket.prototype.setType = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MIMCPacket.prototype.clearType = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCPacket.prototype.hasType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes payload = 5;
 * @return {!(string|Uint8Array)}
 */
proto.MIMCPacket.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes payload = 5;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.MIMCPacket.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.MIMCPacket.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.MIMCPacket.prototype.setPayload = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MIMCPacket.prototype.clearPayload = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCPacket.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 timestamp = 6;
 * @return {string}
 */
proto.MIMCPacket.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "0"));
};


/** @param {string} value */
proto.MIMCPacket.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MIMCPacket.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCPacket.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MIMCPacketList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MIMCPacketList.repeatedFields_, null);
};
goog.inherits(proto.MIMCPacketList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MIMCPacketList.displayName = 'proto.MIMCPacketList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MIMCPacketList.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MIMCPacketList.prototype.toObject = function(opt_includeInstance) {
  return proto.MIMCPacketList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MIMCPacketList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MIMCPacketList.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getField(msg, 1),
    resource: jspb.Message.getField(msg, 2),
    maxsequence: jspb.Message.getField(msg, 3),
    packetsList: jspb.Message.toObjectList(msg.getPacketsList(),
    proto.MIMCPacket.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MIMCPacketList}
 */
proto.MIMCPacketList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MIMCPacketList;
  return proto.MIMCPacketList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MIMCPacketList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MIMCPacketList}
 */
proto.MIMCPacketList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResource(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setMaxsequence(value);
      break;
    case 4:
      var value = new proto.MIMCPacket;
      reader.readMessage(value,proto.MIMCPacket.deserializeBinaryFromReader);
      msg.addPackets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MIMCPacketList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MIMCPacketList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MIMCPacketList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MIMCPacketList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64String(
      3,
      f
    );
  }
  f = message.getPacketsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.MIMCPacket.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 uuid = 1;
 * @return {string}
 */
proto.MIMCPacketList.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.MIMCPacketList.prototype.setUuid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MIMCPacketList.prototype.clearUuid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCPacketList.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string resource = 2;
 * @return {string}
 */
proto.MIMCPacketList.prototype.getResource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MIMCPacketList.prototype.setResource = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MIMCPacketList.prototype.clearResource = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCPacketList.prototype.hasResource = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 maxSequence = 3;
 * @return {string}
 */
proto.MIMCPacketList.prototype.getMaxsequence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/** @param {string} value */
proto.MIMCPacketList.prototype.setMaxsequence = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MIMCPacketList.prototype.clearMaxsequence = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCPacketList.prototype.hasMaxsequence = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated MIMCPacket packets = 4;
 * @return {!Array.<!proto.MIMCPacket>}
 */
proto.MIMCPacketList.prototype.getPacketsList = function() {
  return /** @type{!Array.<!proto.MIMCPacket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MIMCPacket, 4));
};


/** @param {!Array.<!proto.MIMCPacket>} value */
proto.MIMCPacketList.prototype.setPacketsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.MIMCPacket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MIMCPacket}
 */
proto.MIMCPacketList.prototype.addPackets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.MIMCPacket, opt_index);
};


proto.MIMCPacketList.prototype.clearPacketsList = function() {
  this.setPacketsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MIMCPacketAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MIMCPacketAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MIMCPacketAck.displayName = 'proto.MIMCPacketAck';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MIMCPacketAck.prototype.toObject = function(opt_includeInstance) {
  return proto.MIMCPacketAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MIMCPacketAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MIMCPacketAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    packetid: jspb.Message.getField(msg, 1),
    uuid: jspb.Message.getField(msg, 2),
    resource: jspb.Message.getField(msg, 3),
    sequence: jspb.Message.getField(msg, 4),
    timestamp: jspb.Message.getField(msg, 5),
    pb_package: jspb.Message.getField(msg, 6),
    errormsg: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MIMCPacketAck}
 */
proto.MIMCPacketAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MIMCPacketAck;
  return proto.MIMCPacketAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MIMCPacketAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MIMCPacketAck}
 */
proto.MIMCPacketAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPacketid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setResource(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setSequence(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPackage(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MIMCPacketAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MIMCPacketAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MIMCPacketAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MIMCPacketAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64String(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64String(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string packetId = 1;
 * @return {string}
 */
proto.MIMCPacketAck.prototype.getPacketid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.MIMCPacketAck.prototype.setPacketid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MIMCPacketAck.prototype.clearPacketid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCPacketAck.prototype.hasPacketid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 uuid = 2;
 * @return {string}
 */
proto.MIMCPacketAck.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.MIMCPacketAck.prototype.setUuid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MIMCPacketAck.prototype.clearUuid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCPacketAck.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string resource = 3;
 * @return {string}
 */
proto.MIMCPacketAck.prototype.getResource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.MIMCPacketAck.prototype.setResource = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MIMCPacketAck.prototype.clearResource = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCPacketAck.prototype.hasResource = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 sequence = 4;
 * @return {string}
 */
proto.MIMCPacketAck.prototype.getSequence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/** @param {string} value */
proto.MIMCPacketAck.prototype.setSequence = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MIMCPacketAck.prototype.clearSequence = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCPacketAck.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 timestamp = 5;
 * @return {string}
 */
proto.MIMCPacketAck.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/** @param {string} value */
proto.MIMCPacketAck.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MIMCPacketAck.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCPacketAck.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string package = 6;
 * @return {string}
 */
proto.MIMCPacketAck.prototype.getPackage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.MIMCPacketAck.prototype.setPackage = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.MIMCPacketAck.prototype.clearPackage = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCPacketAck.prototype.hasPackage = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string errorMsg = 7;
 * @return {string}
 */
proto.MIMCPacketAck.prototype.getErrormsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.MIMCPacketAck.prototype.setErrormsg = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.MIMCPacketAck.prototype.clearErrormsg = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCPacketAck.prototype.hasErrormsg = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MIMCP2PMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MIMCP2PMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MIMCP2PMessage.displayName = 'proto.MIMCP2PMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MIMCP2PMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.MIMCP2PMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MIMCP2PMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MIMCP2PMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: (f = msg.getFrom()) && proto.MIMCUser.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.MIMCUser.toObject(includeInstance, f),
    payload: msg.getPayload_asB64(),
    isstore: jspb.Message.getField(msg, 4),
    biztype: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MIMCP2PMessage}
 */
proto.MIMCP2PMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MIMCP2PMessage;
  return proto.MIMCP2PMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MIMCP2PMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MIMCP2PMessage}
 */
proto.MIMCP2PMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MIMCUser;
      reader.readMessage(value,proto.MIMCUser.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 2:
      var value = new proto.MIMCUser;
      reader.readMessage(value,proto.MIMCUser.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsstore(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBiztype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MIMCP2PMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MIMCP2PMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MIMCP2PMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MIMCP2PMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MIMCUser.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MIMCUser.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional MIMCUser from = 1;
 * @return {?proto.MIMCUser}
 */
proto.MIMCP2PMessage.prototype.getFrom = function() {
  return /** @type{?proto.MIMCUser} */ (
    jspb.Message.getWrapperField(this, proto.MIMCUser, 1));
};


/** @param {?proto.MIMCUser|undefined} value */
proto.MIMCP2PMessage.prototype.setFrom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MIMCP2PMessage.prototype.clearFrom = function() {
  this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCP2PMessage.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MIMCUser to = 2;
 * @return {?proto.MIMCUser}
 */
proto.MIMCP2PMessage.prototype.getTo = function() {
  return /** @type{?proto.MIMCUser} */ (
    jspb.Message.getWrapperField(this, proto.MIMCUser, 2));
};


/** @param {?proto.MIMCUser|undefined} value */
proto.MIMCP2PMessage.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.MIMCP2PMessage.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCP2PMessage.prototype.hasTo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes payload = 3;
 * @return {!(string|Uint8Array)}
 */
proto.MIMCP2PMessage.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes payload = 3;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.MIMCP2PMessage.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.MIMCP2PMessage.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.MIMCP2PMessage.prototype.setPayload = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MIMCP2PMessage.prototype.clearPayload = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCP2PMessage.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool isStore = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.MIMCP2PMessage.prototype.getIsstore = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.MIMCP2PMessage.prototype.setIsstore = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MIMCP2PMessage.prototype.clearIsstore = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCP2PMessage.prototype.hasIsstore = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string bizType = 5;
 * @return {string}
 */
proto.MIMCP2PMessage.prototype.getBiztype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.MIMCP2PMessage.prototype.setBiztype = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MIMCP2PMessage.prototype.clearBiztype = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCP2PMessage.prototype.hasBiztype = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MIMCP2TMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MIMCP2TMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MIMCP2TMessage.displayName = 'proto.MIMCP2TMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MIMCP2TMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.MIMCP2TMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MIMCP2TMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MIMCP2TMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: (f = msg.getFrom()) && proto.MIMCUser.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.MIMCGroup.toObject(includeInstance, f),
    payload: msg.getPayload_asB64(),
    isstore: jspb.Message.getField(msg, 4),
    biztype: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MIMCP2TMessage}
 */
proto.MIMCP2TMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MIMCP2TMessage;
  return proto.MIMCP2TMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MIMCP2TMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MIMCP2TMessage}
 */
proto.MIMCP2TMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MIMCUser;
      reader.readMessage(value,proto.MIMCUser.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 2:
      var value = new proto.MIMCGroup;
      reader.readMessage(value,proto.MIMCGroup.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsstore(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBiztype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MIMCP2TMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MIMCP2TMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MIMCP2TMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MIMCP2TMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MIMCUser.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.MIMCGroup.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional MIMCUser from = 1;
 * @return {?proto.MIMCUser}
 */
proto.MIMCP2TMessage.prototype.getFrom = function() {
  return /** @type{?proto.MIMCUser} */ (
    jspb.Message.getWrapperField(this, proto.MIMCUser, 1));
};


/** @param {?proto.MIMCUser|undefined} value */
proto.MIMCP2TMessage.prototype.setFrom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MIMCP2TMessage.prototype.clearFrom = function() {
  this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCP2TMessage.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MIMCGroup to = 2;
 * @return {?proto.MIMCGroup}
 */
proto.MIMCP2TMessage.prototype.getTo = function() {
  return /** @type{?proto.MIMCGroup} */ (
    jspb.Message.getWrapperField(this, proto.MIMCGroup, 2));
};


/** @param {?proto.MIMCGroup|undefined} value */
proto.MIMCP2TMessage.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.MIMCP2TMessage.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCP2TMessage.prototype.hasTo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes payload = 3;
 * @return {!(string|Uint8Array)}
 */
proto.MIMCP2TMessage.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes payload = 3;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.MIMCP2TMessage.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.MIMCP2TMessage.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.MIMCP2TMessage.prototype.setPayload = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MIMCP2TMessage.prototype.clearPayload = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCP2TMessage.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool isStore = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.MIMCP2TMessage.prototype.getIsstore = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.MIMCP2TMessage.prototype.setIsstore = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MIMCP2TMessage.prototype.clearIsstore = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCP2TMessage.prototype.hasIsstore = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string bizType = 5;
 * @return {string}
 */
proto.MIMCP2TMessage.prototype.getBiztype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.MIMCP2TMessage.prototype.setBiztype = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.MIMCP2TMessage.prototype.clearBiztype = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCP2TMessage.prototype.hasBiztype = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MIMCSequenceAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MIMCSequenceAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MIMCSequenceAck.displayName = 'proto.MIMCSequenceAck';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MIMCSequenceAck.prototype.toObject = function(opt_includeInstance) {
  return proto.MIMCSequenceAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MIMCSequenceAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MIMCSequenceAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getField(msg, 1),
    resource: jspb.Message.getField(msg, 2),
    sequence: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MIMCSequenceAck}
 */
proto.MIMCSequenceAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MIMCSequenceAck;
  return proto.MIMCSequenceAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MIMCSequenceAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MIMCSequenceAck}
 */
proto.MIMCSequenceAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResource(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MIMCSequenceAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MIMCSequenceAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MIMCSequenceAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MIMCSequenceAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64String(
      3,
      f
    );
  }
};


/**
 * optional int64 uuid = 1;
 * @return {string}
 */
proto.MIMCSequenceAck.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.MIMCSequenceAck.prototype.setUuid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MIMCSequenceAck.prototype.clearUuid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCSequenceAck.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string resource = 2;
 * @return {string}
 */
proto.MIMCSequenceAck.prototype.getResource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MIMCSequenceAck.prototype.setResource = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MIMCSequenceAck.prototype.clearResource = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCSequenceAck.prototype.hasResource = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 sequence = 3;
 * @return {string}
 */
proto.MIMCSequenceAck.prototype.getSequence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/** @param {string} value */
proto.MIMCSequenceAck.prototype.setSequence = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MIMCSequenceAck.prototype.clearSequence = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCSequenceAck.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MIMCPull = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MIMCPull, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MIMCPull.displayName = 'proto.MIMCPull';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MIMCPull.prototype.toObject = function(opt_includeInstance) {
  return proto.MIMCPull.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MIMCPull} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MIMCPull.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getField(msg, 1),
    resource: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MIMCPull}
 */
proto.MIMCPull.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MIMCPull;
  return proto.MIMCPull.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MIMCPull} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MIMCPull}
 */
proto.MIMCPull.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MIMCPull.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MIMCPull.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MIMCPull} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MIMCPull.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 uuid = 1;
 * @return {string}
 */
proto.MIMCPull.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.MIMCPull.prototype.setUuid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MIMCPull.prototype.clearUuid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCPull.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string resource = 2;
 * @return {string}
 */
proto.MIMCPull.prototype.getResource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MIMCPull.prototype.setResource = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MIMCPull.prototype.clearResource = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCPull.prototype.hasResource = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.P2PPushMesage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.P2PPushMesage.repeatedFields_, null);
};
goog.inherits(proto.P2PPushMesage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.P2PPushMesage.displayName = 'proto.P2PPushMesage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.P2PPushMesage.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.P2PPushMesage.prototype.toObject = function(opt_includeInstance) {
  return proto.P2PPushMesage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.P2PPushMesage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.P2PPushMesage.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: (f = msg.getFrom()) && proto.MIMCUser.toObject(includeInstance, f),
    toList: jspb.Message.toObjectList(msg.getToList(),
    proto.MIMCUser.toObject, includeInstance),
    payload: msg.getPayload_asB64(),
    isstore: jspb.Message.getField(msg, 4),
    biztype: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.P2PPushMesage}
 */
proto.P2PPushMesage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.P2PPushMesage;
  return proto.P2PPushMesage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.P2PPushMesage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.P2PPushMesage}
 */
proto.P2PPushMesage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MIMCUser;
      reader.readMessage(value,proto.MIMCUser.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 2:
      var value = new proto.MIMCUser;
      reader.readMessage(value,proto.MIMCUser.deserializeBinaryFromReader);
      msg.addTo(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsstore(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBiztype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.P2PPushMesage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.P2PPushMesage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.P2PPushMesage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.P2PPushMesage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MIMCUser.serializeBinaryToWriter
    );
  }
  f = message.getToList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MIMCUser.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional MIMCUser from = 1;
 * @return {?proto.MIMCUser}
 */
proto.P2PPushMesage.prototype.getFrom = function() {
  return /** @type{?proto.MIMCUser} */ (
    jspb.Message.getWrapperField(this, proto.MIMCUser, 1));
};


/** @param {?proto.MIMCUser|undefined} value */
proto.P2PPushMesage.prototype.setFrom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.P2PPushMesage.prototype.clearFrom = function() {
  this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.P2PPushMesage.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated MIMCUser to = 2;
 * @return {!Array.<!proto.MIMCUser>}
 */
proto.P2PPushMesage.prototype.getToList = function() {
  return /** @type{!Array.<!proto.MIMCUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MIMCUser, 2));
};


/** @param {!Array.<!proto.MIMCUser>} value */
proto.P2PPushMesage.prototype.setToList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MIMCUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MIMCUser}
 */
proto.P2PPushMesage.prototype.addTo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MIMCUser, opt_index);
};


proto.P2PPushMesage.prototype.clearToList = function() {
  this.setToList([]);
};


/**
 * optional bytes payload = 3;
 * @return {!(string|Uint8Array)}
 */
proto.P2PPushMesage.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes payload = 3;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.P2PPushMesage.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.P2PPushMesage.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.P2PPushMesage.prototype.setPayload = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.P2PPushMesage.prototype.clearPayload = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.P2PPushMesage.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool isStore = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.P2PPushMesage.prototype.getIsstore = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.P2PPushMesage.prototype.setIsstore = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.P2PPushMesage.prototype.clearIsstore = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.P2PPushMesage.prototype.hasIsstore = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string bizType = 5;
 * @return {string}
 */
proto.P2PPushMesage.prototype.getBiztype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.P2PPushMesage.prototype.setBiztype = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.P2PPushMesage.prototype.clearBiztype = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.P2PPushMesage.prototype.hasBiztype = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.P2TPushMesage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.P2TPushMesage.repeatedFields_, null);
};
goog.inherits(proto.P2TPushMesage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.P2TPushMesage.displayName = 'proto.P2TPushMesage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.P2TPushMesage.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.P2TPushMesage.prototype.toObject = function(opt_includeInstance) {
  return proto.P2TPushMesage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.P2TPushMesage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.P2TPushMesage.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: (f = msg.getFrom()) && proto.MIMCUser.toObject(includeInstance, f),
    toList: jspb.Message.toObjectList(msg.getToList(),
    proto.MIMCGroup.toObject, includeInstance),
    payload: msg.getPayload_asB64(),
    isstore: jspb.Message.getField(msg, 4),
    biztype: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.P2TPushMesage}
 */
proto.P2TPushMesage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.P2TPushMesage;
  return proto.P2TPushMesage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.P2TPushMesage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.P2TPushMesage}
 */
proto.P2TPushMesage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MIMCUser;
      reader.readMessage(value,proto.MIMCUser.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 2:
      var value = new proto.MIMCGroup;
      reader.readMessage(value,proto.MIMCGroup.deserializeBinaryFromReader);
      msg.addTo(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsstore(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBiztype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.P2TPushMesage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.P2TPushMesage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.P2TPushMesage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.P2TPushMesage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MIMCUser.serializeBinaryToWriter
    );
  }
  f = message.getToList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.MIMCGroup.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional MIMCUser from = 1;
 * @return {?proto.MIMCUser}
 */
proto.P2TPushMesage.prototype.getFrom = function() {
  return /** @type{?proto.MIMCUser} */ (
    jspb.Message.getWrapperField(this, proto.MIMCUser, 1));
};


/** @param {?proto.MIMCUser|undefined} value */
proto.P2TPushMesage.prototype.setFrom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.P2TPushMesage.prototype.clearFrom = function() {
  this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.P2TPushMesage.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated MIMCGroup to = 2;
 * @return {!Array.<!proto.MIMCGroup>}
 */
proto.P2TPushMesage.prototype.getToList = function() {
  return /** @type{!Array.<!proto.MIMCGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.MIMCGroup, 2));
};


/** @param {!Array.<!proto.MIMCGroup>} value */
proto.P2TPushMesage.prototype.setToList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.MIMCGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.MIMCGroup}
 */
proto.P2TPushMesage.prototype.addTo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.MIMCGroup, opt_index);
};


proto.P2TPushMesage.prototype.clearToList = function() {
  this.setToList([]);
};


/**
 * optional bytes payload = 3;
 * @return {!(string|Uint8Array)}
 */
proto.P2TPushMesage.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes payload = 3;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.P2TPushMesage.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.P2TPushMesage.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.P2TPushMesage.prototype.setPayload = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.P2TPushMesage.prototype.clearPayload = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.P2TPushMesage.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool isStore = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.P2TPushMesage.prototype.getIsstore = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.P2TPushMesage.prototype.setIsstore = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.P2TPushMesage.prototype.clearIsstore = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.P2TPushMesage.prototype.hasIsstore = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string bizType = 5;
 * @return {string}
 */
proto.P2TPushMesage.prototype.getBiztype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.P2TPushMesage.prototype.setBiztype = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.P2TPushMesage.prototype.clearBiztype = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.P2TPushMesage.prototype.hasBiztype = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MIMCUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MIMCUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MIMCUser.displayName = 'proto.MIMCUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MIMCUser.prototype.toObject = function(opt_includeInstance) {
  return proto.MIMCUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MIMCUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MIMCUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    appid: jspb.Message.getField(msg, 1),
    appaccount: jspb.Message.getField(msg, 2),
    uuid: jspb.Message.getField(msg, 3),
    resource: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MIMCUser}
 */
proto.MIMCUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MIMCUser;
  return proto.MIMCUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MIMCUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MIMCUser}
 */
proto.MIMCUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setAppid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppaccount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUuid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setResource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MIMCUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MIMCUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MIMCUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MIMCUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64String(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int64 appId = 1;
 * @return {string}
 */
proto.MIMCUser.prototype.getAppid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.MIMCUser.prototype.setAppid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MIMCUser.prototype.clearAppid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCUser.prototype.hasAppid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string appAccount = 2;
 * @return {string}
 */
proto.MIMCUser.prototype.getAppaccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MIMCUser.prototype.setAppaccount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MIMCUser.prototype.clearAppaccount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCUser.prototype.hasAppaccount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 uuid = 3;
 * @return {string}
 */
proto.MIMCUser.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/** @param {string} value */
proto.MIMCUser.prototype.setUuid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.MIMCUser.prototype.clearUuid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCUser.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string resource = 4;
 * @return {string}
 */
proto.MIMCUser.prototype.getResource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.MIMCUser.prototype.setResource = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.MIMCUser.prototype.clearResource = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCUser.prototype.hasResource = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MIMCGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MIMCGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MIMCGroup.displayName = 'proto.MIMCGroup';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MIMCGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.MIMCGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MIMCGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MIMCGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    appid: jspb.Message.getField(msg, 1),
    topicid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MIMCGroup}
 */
proto.MIMCGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MIMCGroup;
  return proto.MIMCGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MIMCGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MIMCGroup}
 */
proto.MIMCGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setAppid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTopicid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MIMCGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MIMCGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MIMCGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MIMCGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64String(
      2,
      f
    );
  }
};


/**
 * optional int64 appId = 1;
 * @return {string}
 */
proto.MIMCGroup.prototype.getAppid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.MIMCGroup.prototype.setAppid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MIMCGroup.prototype.clearAppid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCGroup.prototype.hasAppid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 topicId = 2;
 * @return {string}
 */
proto.MIMCGroup.prototype.getTopicid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.MIMCGroup.prototype.setTopicid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MIMCGroup.prototype.clearTopicid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MIMCGroup.prototype.hasTopicid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UCGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UCGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UCGroup.displayName = 'proto.UCGroup';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UCGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.UCGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UCGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    appid: jspb.Message.getField(msg, 1),
    topicid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UCGroup}
 */
proto.UCGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UCGroup;
  return proto.UCGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UCGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UCGroup}
 */
proto.UCGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setAppid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTopicid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UCGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UCGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UCGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64String(
      2,
      f
    );
  }
};


/**
 * optional int64 appId = 1;
 * @return {string}
 */
proto.UCGroup.prototype.getAppid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.UCGroup.prototype.setAppid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.UCGroup.prototype.clearAppid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCGroup.prototype.hasAppid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 topicId = 2;
 * @return {string}
 */
proto.UCGroup.prototype.getTopicid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.UCGroup.prototype.setTopicid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UCGroup.prototype.clearTopicid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCGroup.prototype.hasTopicid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UCPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UCPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UCPacket.displayName = 'proto.UCPacket';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UCPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.UCPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UCPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.MIMCUser.toObject(includeInstance, f),
    type: jspb.Message.getField(msg, 2),
    payload: msg.getPayload_asB64(),
    packetid: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UCPacket}
 */
proto.UCPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UCPacket;
  return proto.UCPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UCPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UCPacket}
 */
proto.UCPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MIMCUser;
      reader.readMessage(value,proto.MIMCUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {!proto.UC_MSG_TYPE} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPacketid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UCPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UCPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UCPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MIMCUser.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.UC_MSG_TYPE} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required MIMCUser user = 1;
 * @return {!proto.MIMCUser}
 */
proto.UCPacket.prototype.getUser = function() {
  return /** @type{!proto.MIMCUser} */ (
    jspb.Message.getWrapperField(this, proto.MIMCUser, 1, 1));
};


/** @param {!proto.MIMCUser} value */
proto.UCPacket.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UCPacket.prototype.clearUser = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCPacket.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required UC_MSG_TYPE type = 2;
 * @return {!proto.UC_MSG_TYPE}
 */
proto.UCPacket.prototype.getType = function() {
  return /** @type {!proto.UC_MSG_TYPE} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {!proto.UC_MSG_TYPE} value */
proto.UCPacket.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UCPacket.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCPacket.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bytes payload = 3;
 * @return {!(string|Uint8Array)}
 */
proto.UCPacket.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * required bytes payload = 3;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.UCPacket.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * required bytes payload = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.UCPacket.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.UCPacket.prototype.setPayload = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.UCPacket.prototype.clearPayload = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCPacket.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string packetId = 4;
 * @return {string}
 */
proto.UCPacket.prototype.getPacketid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.UCPacket.prototype.setPacketid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.UCPacket.prototype.clearPacketid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCPacket.prototype.hasPacketid = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UCExchange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UCExchange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UCExchange.displayName = 'proto.UCExchange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UCExchange.prototype.toObject = function(opt_includeInstance) {
  return proto.UCExchange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UCExchange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCExchange.toObject = function(includeInstance, msg) {
  var f, obj = {
    feinfo: (f = msg.getFeinfo()) && proto.FeInfo.toObject(includeInstance, f),
    packet: (f = msg.getPacket()) && proto.UCPacket.toObject(includeInstance, f),
    pb_package: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UCExchange}
 */
proto.UCExchange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UCExchange;
  return proto.UCExchange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UCExchange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UCExchange}
 */
proto.UCExchange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.FeInfo;
      reader.readMessage(value,proto.FeInfo.deserializeBinaryFromReader);
      msg.setFeinfo(value);
      break;
    case 2:
      var value = new proto.UCPacket;
      reader.readMessage(value,proto.UCPacket.deserializeBinaryFromReader);
      msg.setPacket(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPackage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UCExchange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UCExchange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UCExchange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCExchange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.FeInfo.serializeBinaryToWriter
    );
  }
  f = message.getPacket();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.UCPacket.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional FeInfo feInfo = 1;
 * @return {?proto.FeInfo}
 */
proto.UCExchange.prototype.getFeinfo = function() {
  return /** @type{?proto.FeInfo} */ (
    jspb.Message.getWrapperField(this, proto.FeInfo, 1));
};


/** @param {?proto.FeInfo|undefined} value */
proto.UCExchange.prototype.setFeinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UCExchange.prototype.clearFeinfo = function() {
  this.setFeinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCExchange.prototype.hasFeinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required UCPacket packet = 2;
 * @return {!proto.UCPacket}
 */
proto.UCExchange.prototype.getPacket = function() {
  return /** @type{!proto.UCPacket} */ (
    jspb.Message.getWrapperField(this, proto.UCPacket, 2, 1));
};


/** @param {!proto.UCPacket} value */
proto.UCExchange.prototype.setPacket = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.UCExchange.prototype.clearPacket = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCExchange.prototype.hasPacket = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string package = 3;
 * @return {string}
 */
proto.UCExchange.prototype.getPackage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.UCExchange.prototype.setPackage = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.UCExchange.prototype.clearPackage = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCExchange.prototype.hasPackage = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UCJoin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UCJoin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UCJoin.displayName = 'proto.UCJoin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UCJoin.prototype.toObject = function(opt_includeInstance) {
  return proto.UCJoin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UCJoin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCJoin.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: (f = msg.getGroup()) && proto.UCGroup.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UCJoin}
 */
proto.UCJoin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UCJoin;
  return proto.UCJoin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UCJoin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UCJoin}
 */
proto.UCJoin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UCGroup;
      reader.readMessage(value,proto.UCGroup.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UCJoin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UCJoin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UCJoin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCJoin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.UCGroup.serializeBinaryToWriter
    );
  }
};


/**
 * required UCGroup group = 1;
 * @return {!proto.UCGroup}
 */
proto.UCJoin.prototype.getGroup = function() {
  return /** @type{!proto.UCGroup} */ (
    jspb.Message.getWrapperField(this, proto.UCGroup, 1, 1));
};


/** @param {!proto.UCGroup} value */
proto.UCJoin.prototype.setGroup = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UCJoin.prototype.clearGroup = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCJoin.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UCJoinResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UCJoinResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UCJoinResp.displayName = 'proto.UCJoinResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UCJoinResp.prototype.toObject = function(opt_includeInstance) {
  return proto.UCJoinResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UCJoinResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCJoinResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: (f = msg.getGroup()) && proto.UCGroup.toObject(includeInstance, f),
    code: jspb.Message.getField(msg, 2),
    message: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UCJoinResp}
 */
proto.UCJoinResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UCJoinResp;
  return proto.UCJoinResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UCJoinResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UCJoinResp}
 */
proto.UCJoinResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UCGroup;
      reader.readMessage(value,proto.UCGroup.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UCJoinResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UCJoinResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UCJoinResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCJoinResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.UCGroup.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required UCGroup group = 1;
 * @return {!proto.UCGroup}
 */
proto.UCJoinResp.prototype.getGroup = function() {
  return /** @type{!proto.UCGroup} */ (
    jspb.Message.getWrapperField(this, proto.UCGroup, 1, 1));
};


/** @param {!proto.UCGroup} value */
proto.UCJoinResp.prototype.setGroup = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UCJoinResp.prototype.clearGroup = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCJoinResp.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 code = 2;
 * @return {number}
 */
proto.UCJoinResp.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.UCJoinResp.prototype.setCode = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UCJoinResp.prototype.clearCode = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCJoinResp.prototype.hasCode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.UCJoinResp.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.UCJoinResp.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.UCJoinResp.prototype.clearMessage = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCJoinResp.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UCQuit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UCQuit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UCQuit.displayName = 'proto.UCQuit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UCQuit.prototype.toObject = function(opt_includeInstance) {
  return proto.UCQuit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UCQuit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCQuit.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: (f = msg.getGroup()) && proto.UCGroup.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UCQuit}
 */
proto.UCQuit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UCQuit;
  return proto.UCQuit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UCQuit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UCQuit}
 */
proto.UCQuit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UCGroup;
      reader.readMessage(value,proto.UCGroup.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UCQuit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UCQuit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UCQuit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCQuit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.UCGroup.serializeBinaryToWriter
    );
  }
};


/**
 * required UCGroup group = 1;
 * @return {!proto.UCGroup}
 */
proto.UCQuit.prototype.getGroup = function() {
  return /** @type{!proto.UCGroup} */ (
    jspb.Message.getWrapperField(this, proto.UCGroup, 1, 1));
};


/** @param {!proto.UCGroup} value */
proto.UCQuit.prototype.setGroup = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UCQuit.prototype.clearGroup = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCQuit.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UCQuitResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UCQuitResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UCQuitResp.displayName = 'proto.UCQuitResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UCQuitResp.prototype.toObject = function(opt_includeInstance) {
  return proto.UCQuitResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UCQuitResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCQuitResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: (f = msg.getGroup()) && proto.UCGroup.toObject(includeInstance, f),
    code: jspb.Message.getField(msg, 2),
    message: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UCQuitResp}
 */
proto.UCQuitResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UCQuitResp;
  return proto.UCQuitResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UCQuitResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UCQuitResp}
 */
proto.UCQuitResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UCGroup;
      reader.readMessage(value,proto.UCGroup.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UCQuitResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UCQuitResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UCQuitResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCQuitResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.UCGroup.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required UCGroup group = 1;
 * @return {!proto.UCGroup}
 */
proto.UCQuitResp.prototype.getGroup = function() {
  return /** @type{!proto.UCGroup} */ (
    jspb.Message.getWrapperField(this, proto.UCGroup, 1, 1));
};


/** @param {!proto.UCGroup} value */
proto.UCQuitResp.prototype.setGroup = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UCQuitResp.prototype.clearGroup = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCQuitResp.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 code = 2;
 * @return {number}
 */
proto.UCQuitResp.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.UCQuitResp.prototype.setCode = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UCQuitResp.prototype.clearCode = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCQuitResp.prototype.hasCode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.UCQuitResp.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.UCQuitResp.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.UCQuitResp.prototype.clearMessage = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCQuitResp.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UCPing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.UCPing.repeatedFields_, null);
};
goog.inherits(proto.UCPing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UCPing.displayName = 'proto.UCPing';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UCPing.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UCPing.prototype.toObject = function(opt_includeInstance) {
  return proto.UCPing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UCPing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCPing.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupList: jspb.Message.toObjectList(msg.getGroupList(),
    proto.UCGroup.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UCPing}
 */
proto.UCPing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UCPing;
  return proto.UCPing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UCPing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UCPing}
 */
proto.UCPing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UCGroup;
      reader.readMessage(value,proto.UCGroup.deserializeBinaryFromReader);
      msg.addGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UCPing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UCPing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UCPing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCPing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.UCGroup.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UCGroup group = 1;
 * @return {!Array.<!proto.UCGroup>}
 */
proto.UCPing.prototype.getGroupList = function() {
  return /** @type{!Array.<!proto.UCGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.UCGroup, 1));
};


/** @param {!Array.<!proto.UCGroup>} value */
proto.UCPing.prototype.setGroupList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.UCGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.UCGroup}
 */
proto.UCPing.prototype.addGroup = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.UCGroup, opt_index);
};


proto.UCPing.prototype.clearGroupList = function() {
  this.setGroupList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UCMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UCMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UCMessage.displayName = 'proto.UCMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UCMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.UCMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UCMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: (f = msg.getGroup()) && proto.UCGroup.toObject(includeInstance, f),
    payload: msg.getPayload_asB64(),
    sequence: jspb.Message.getField(msg, 3),
    isstore: jspb.Message.getField(msg, 4),
    user: (f = msg.getUser()) && proto.MIMCUser.toObject(includeInstance, f),
    timestamp: jspb.Message.getField(msg, 6),
    packetid: jspb.Message.getField(msg, 7),
    biztype: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UCMessage}
 */
proto.UCMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UCMessage;
  return proto.UCMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UCMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UCMessage}
 */
proto.UCMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UCGroup;
      reader.readMessage(value,proto.UCGroup.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setSequence(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsstore(value);
      break;
    case 5:
      var value = new proto.MIMCUser;
      reader.readMessage(value,proto.MIMCUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTimestamp(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPacketid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setBiztype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UCMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UCMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UCMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.UCGroup.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64String(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.MIMCUser.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt64String(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * required UCGroup group = 1;
 * @return {!proto.UCGroup}
 */
proto.UCMessage.prototype.getGroup = function() {
  return /** @type{!proto.UCGroup} */ (
    jspb.Message.getWrapperField(this, proto.UCGroup, 1, 1));
};


/** @param {!proto.UCGroup} value */
proto.UCMessage.prototype.setGroup = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UCMessage.prototype.clearGroup = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCMessage.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes payload = 2;
 * @return {!(string|Uint8Array)}
 */
proto.UCMessage.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes payload = 2;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.UCMessage.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * required bytes payload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.UCMessage.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.UCMessage.prototype.setPayload = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UCMessage.prototype.clearPayload = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCMessage.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 sequence = 3;
 * @return {string}
 */
proto.UCMessage.prototype.getSequence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/** @param {string} value */
proto.UCMessage.prototype.setSequence = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.UCMessage.prototype.clearSequence = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCMessage.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool isStore = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.UCMessage.prototype.getIsstore = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.UCMessage.prototype.setIsstore = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.UCMessage.prototype.clearIsstore = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCMessage.prototype.hasIsstore = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional MIMCUser user = 5;
 * @return {?proto.MIMCUser}
 */
proto.UCMessage.prototype.getUser = function() {
  return /** @type{?proto.MIMCUser} */ (
    jspb.Message.getWrapperField(this, proto.MIMCUser, 5));
};


/** @param {?proto.MIMCUser|undefined} value */
proto.UCMessage.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.UCMessage.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCMessage.prototype.hasUser = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 timestamp = 6;
 * @return {string}
 */
proto.UCMessage.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "0"));
};


/** @param {string} value */
proto.UCMessage.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.UCMessage.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCMessage.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string packetId = 7;
 * @return {string}
 */
proto.UCMessage.prototype.getPacketid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.UCMessage.prototype.setPacketid = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.UCMessage.prototype.clearPacketid = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCMessage.prototype.hasPacketid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string bizType = 8;
 * @return {string}
 */
proto.UCMessage.prototype.getBiztype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.UCMessage.prototype.setBiztype = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.UCMessage.prototype.clearBiztype = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCMessage.prototype.hasBiztype = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UCPushMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.UCPushMessage.repeatedFields_, null);
};
goog.inherits(proto.UCPushMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UCPushMessage.displayName = 'proto.UCPushMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UCPushMessage.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UCPushMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.UCPushMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UCPushMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCPushMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.MIMCUser.toObject(includeInstance, f),
    groupList: jspb.Message.toObjectList(msg.getGroupList(),
    proto.UCGroup.toObject, includeInstance),
    payloadsList: msg.getPayloadsList_asB64(),
    isstore: jspb.Message.getField(msg, 4),
    timestamp: jspb.Message.getField(msg, 5),
    packetid: jspb.Message.getField(msg, 6),
    biztype: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UCPushMessage}
 */
proto.UCPushMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UCPushMessage;
  return proto.UCPushMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UCPushMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UCPushMessage}
 */
proto.UCPushMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.MIMCUser;
      reader.readMessage(value,proto.MIMCUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = new proto.UCGroup;
      reader.readMessage(value,proto.UCGroup.deserializeBinaryFromReader);
      msg.addGroup(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addPayloads(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsstore(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPacketid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBiztype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UCPushMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UCPushMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UCPushMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCPushMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.MIMCUser.serializeBinaryToWriter
    );
  }
  f = message.getGroupList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.UCGroup.serializeBinaryToWriter
    );
  }
  f = message.getPayloadsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64String(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * required MIMCUser user = 1;
 * @return {!proto.MIMCUser}
 */
proto.UCPushMessage.prototype.getUser = function() {
  return /** @type{!proto.MIMCUser} */ (
    jspb.Message.getWrapperField(this, proto.MIMCUser, 1, 1));
};


/** @param {!proto.MIMCUser} value */
proto.UCPushMessage.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UCPushMessage.prototype.clearUser = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCPushMessage.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated UCGroup group = 2;
 * @return {!Array.<!proto.UCGroup>}
 */
proto.UCPushMessage.prototype.getGroupList = function() {
  return /** @type{!Array.<!proto.UCGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.UCGroup, 2));
};


/** @param {!Array.<!proto.UCGroup>} value */
proto.UCPushMessage.prototype.setGroupList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.UCGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.UCGroup}
 */
proto.UCPushMessage.prototype.addGroup = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.UCGroup, opt_index);
};


proto.UCPushMessage.prototype.clearGroupList = function() {
  this.setGroupList([]);
};


/**
 * repeated bytes payloads = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.UCPushMessage.prototype.getPayloadsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes payloads = 3;
 * This is a type-conversion wrapper around `getPayloadsList()`
 * @return {!Array.<string>}
 */
proto.UCPushMessage.prototype.getPayloadsList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getPayloadsList()));
};


/**
 * repeated bytes payloads = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayloadsList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.UCPushMessage.prototype.getPayloadsList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getPayloadsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.UCPushMessage.prototype.setPayloadsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.UCPushMessage.prototype.addPayloads = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.UCPushMessage.prototype.clearPayloadsList = function() {
  this.setPayloadsList([]);
};


/**
 * optional bool isStore = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.UCPushMessage.prototype.getIsstore = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.UCPushMessage.prototype.setIsstore = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.UCPushMessage.prototype.clearIsstore = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCPushMessage.prototype.hasIsstore = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 timestamp = 5;
 * @return {string}
 */
proto.UCPushMessage.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/** @param {string} value */
proto.UCPushMessage.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.UCPushMessage.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCPushMessage.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string packetId = 6;
 * @return {string}
 */
proto.UCPushMessage.prototype.getPacketid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.UCPushMessage.prototype.setPacketid = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.UCPushMessage.prototype.clearPacketid = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCPushMessage.prototype.hasPacketid = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string bizType = 7;
 * @return {string}
 */
proto.UCPushMessage.prototype.getBiztype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.UCPushMessage.prototype.setBiztype = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.UCPushMessage.prototype.clearBiztype = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCPushMessage.prototype.hasBiztype = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UCMessageList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.UCMessageList.repeatedFields_, null);
};
goog.inherits(proto.UCMessageList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UCMessageList.displayName = 'proto.UCMessageList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UCMessageList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UCMessageList.prototype.toObject = function(opt_includeInstance) {
  return proto.UCMessageList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UCMessageList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCMessageList.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: (f = msg.getGroup()) && proto.UCGroup.toObject(includeInstance, f),
    messageList: jspb.Message.toObjectList(msg.getMessageList(),
    proto.UCMessage.toObject, includeInstance),
    maxsequence: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UCMessageList}
 */
proto.UCMessageList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UCMessageList;
  return proto.UCMessageList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UCMessageList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UCMessageList}
 */
proto.UCMessageList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UCGroup;
      reader.readMessage(value,proto.UCGroup.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    case 2:
      var value = new proto.UCMessage;
      reader.readMessage(value,proto.UCMessage.deserializeBinaryFromReader);
      msg.addMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setMaxsequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UCMessageList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UCMessageList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UCMessageList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCMessageList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.UCGroup.serializeBinaryToWriter
    );
  }
  f = message.getMessageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.UCMessage.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64String(
      3,
      f
    );
  }
};


/**
 * required UCGroup group = 1;
 * @return {!proto.UCGroup}
 */
proto.UCMessageList.prototype.getGroup = function() {
  return /** @type{!proto.UCGroup} */ (
    jspb.Message.getWrapperField(this, proto.UCGroup, 1, 1));
};


/** @param {!proto.UCGroup} value */
proto.UCMessageList.prototype.setGroup = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UCMessageList.prototype.clearGroup = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCMessageList.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated UCMessage message = 2;
 * @return {!Array.<!proto.UCMessage>}
 */
proto.UCMessageList.prototype.getMessageList = function() {
  return /** @type{!Array.<!proto.UCMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.UCMessage, 2));
};


/** @param {!Array.<!proto.UCMessage>} value */
proto.UCMessageList.prototype.setMessageList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.UCMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.UCMessage}
 */
proto.UCMessageList.prototype.addMessage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.UCMessage, opt_index);
};


proto.UCMessageList.prototype.clearMessageList = function() {
  this.setMessageList([]);
};


/**
 * optional int64 maxSequence = 3;
 * @return {string}
 */
proto.UCMessageList.prototype.getMaxsequence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/** @param {string} value */
proto.UCMessageList.prototype.setMaxsequence = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.UCMessageList.prototype.clearMaxsequence = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCMessageList.prototype.hasMaxsequence = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UCSequenceAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UCSequenceAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UCSequenceAck.displayName = 'proto.UCSequenceAck';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UCSequenceAck.prototype.toObject = function(opt_includeInstance) {
  return proto.UCSequenceAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UCSequenceAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCSequenceAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: (f = msg.getGroup()) && proto.UCGroup.toObject(includeInstance, f),
    sequence: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UCSequenceAck}
 */
proto.UCSequenceAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UCSequenceAck;
  return proto.UCSequenceAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UCSequenceAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UCSequenceAck}
 */
proto.UCSequenceAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UCGroup;
      reader.readMessage(value,proto.UCGroup.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UCSequenceAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UCSequenceAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UCSequenceAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCSequenceAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.UCGroup.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64String(
      2,
      f
    );
  }
};


/**
 * required UCGroup group = 1;
 * @return {!proto.UCGroup}
 */
proto.UCSequenceAck.prototype.getGroup = function() {
  return /** @type{!proto.UCGroup} */ (
    jspb.Message.getWrapperField(this, proto.UCGroup, 1, 1));
};


/** @param {!proto.UCGroup} value */
proto.UCSequenceAck.prototype.setGroup = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UCSequenceAck.prototype.clearGroup = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCSequenceAck.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 sequence = 2;
 * @return {string}
 */
proto.UCSequenceAck.prototype.getSequence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.UCSequenceAck.prototype.setSequence = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UCSequenceAck.prototype.clearSequence = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCSequenceAck.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UCDismiss = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UCDismiss, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UCDismiss.displayName = 'proto.UCDismiss';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UCDismiss.prototype.toObject = function(opt_includeInstance) {
  return proto.UCDismiss.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UCDismiss} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCDismiss.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: (f = msg.getGroup()) && proto.UCGroup.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UCDismiss}
 */
proto.UCDismiss.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UCDismiss;
  return proto.UCDismiss.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UCDismiss} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UCDismiss}
 */
proto.UCDismiss.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UCGroup;
      reader.readMessage(value,proto.UCGroup.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UCDismiss.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UCDismiss.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UCDismiss} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCDismiss.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.UCGroup.serializeBinaryToWriter
    );
  }
};


/**
 * required UCGroup group = 1;
 * @return {!proto.UCGroup}
 */
proto.UCDismiss.prototype.getGroup = function() {
  return /** @type{!proto.UCGroup} */ (
    jspb.Message.getWrapperField(this, proto.UCGroup, 1, 1));
};


/** @param {!proto.UCGroup} value */
proto.UCDismiss.prototype.setGroup = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UCDismiss.prototype.clearGroup = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCDismiss.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UCQueryOnlineUsers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UCQueryOnlineUsers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UCQueryOnlineUsers.displayName = 'proto.UCQueryOnlineUsers';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UCQueryOnlineUsers.prototype.toObject = function(opt_includeInstance) {
  return proto.UCQueryOnlineUsers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UCQueryOnlineUsers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCQueryOnlineUsers.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: (f = msg.getGroup()) && proto.UCGroup.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UCQueryOnlineUsers}
 */
proto.UCQueryOnlineUsers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UCQueryOnlineUsers;
  return proto.UCQueryOnlineUsers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UCQueryOnlineUsers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UCQueryOnlineUsers}
 */
proto.UCQueryOnlineUsers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UCGroup;
      reader.readMessage(value,proto.UCGroup.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UCQueryOnlineUsers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UCQueryOnlineUsers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UCQueryOnlineUsers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCQueryOnlineUsers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.UCGroup.serializeBinaryToWriter
    );
  }
};


/**
 * required UCGroup group = 1;
 * @return {!proto.UCGroup}
 */
proto.UCQueryOnlineUsers.prototype.getGroup = function() {
  return /** @type{!proto.UCGroup} */ (
    jspb.Message.getWrapperField(this, proto.UCGroup, 1, 1));
};


/** @param {!proto.UCGroup} value */
proto.UCQueryOnlineUsers.prototype.setGroup = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UCQueryOnlineUsers.prototype.clearGroup = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCQueryOnlineUsers.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UCQueryOnlineUsersResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UCQueryOnlineUsersResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UCQueryOnlineUsersResp.displayName = 'proto.UCQueryOnlineUsersResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UCQueryOnlineUsersResp.prototype.toObject = function(opt_includeInstance) {
  return proto.UCQueryOnlineUsersResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UCQueryOnlineUsersResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCQueryOnlineUsersResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: (f = msg.getGroup()) && proto.UCGroup.toObject(includeInstance, f),
    usercount: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UCQueryOnlineUsersResp}
 */
proto.UCQueryOnlineUsersResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UCQueryOnlineUsersResp;
  return proto.UCQueryOnlineUsersResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UCQueryOnlineUsersResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UCQueryOnlineUsersResp}
 */
proto.UCQueryOnlineUsersResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UCGroup;
      reader.readMessage(value,proto.UCGroup.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUsercount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UCQueryOnlineUsersResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UCQueryOnlineUsersResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UCQueryOnlineUsersResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UCQueryOnlineUsersResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.UCGroup.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64String(
      2,
      f
    );
  }
};


/**
 * required UCGroup group = 1;
 * @return {!proto.UCGroup}
 */
proto.UCQueryOnlineUsersResp.prototype.getGroup = function() {
  return /** @type{!proto.UCGroup} */ (
    jspb.Message.getWrapperField(this, proto.UCGroup, 1, 1));
};


/** @param {!proto.UCGroup} value */
proto.UCQueryOnlineUsersResp.prototype.setGroup = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UCQueryOnlineUsersResp.prototype.clearGroup = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCQueryOnlineUsersResp.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 userCount = 2;
 * @return {string}
 */
proto.UCQueryOnlineUsersResp.prototype.getUsercount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.UCQueryOnlineUsersResp.prototype.setUsercount = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UCQueryOnlineUsersResp.prototype.clearUsercount = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UCQueryOnlineUsersResp.prototype.hasUsercount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FeInfo.displayName = 'proto.FeInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.FeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    feSrcIp: jspb.Message.getField(msg, 1),
    feSrcPort: jspb.Message.getField(msg, 2),
    feThreadId: jspb.Message.getField(msg, 3),
    feUcid: jspb.Message.getField(msg, 4),
    feSid: jspb.Message.getField(msg, 5),
    feSeqno: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FeInfo}
 */
proto.FeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FeInfo;
  return proto.FeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FeInfo}
 */
proto.FeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeSrcIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFeSrcPort(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFeThreadId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setFeUcid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setFeSid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setFeSeqno(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64String(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64String(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint64String(
      6,
      f
    );
  }
};


/**
 * optional string fe_src_ip = 1;
 * @return {string}
 */
proto.FeInfo.prototype.getFeSrcIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.FeInfo.prototype.setFeSrcIp = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.FeInfo.prototype.clearFeSrcIp = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FeInfo.prototype.hasFeSrcIp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 fe_src_port = 2;
 * @return {number}
 */
proto.FeInfo.prototype.getFeSrcPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.FeInfo.prototype.setFeSrcPort = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.FeInfo.prototype.clearFeSrcPort = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FeInfo.prototype.hasFeSrcPort = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 fe_thread_id = 3;
 * @return {number}
 */
proto.FeInfo.prototype.getFeThreadId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.FeInfo.prototype.setFeThreadId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.FeInfo.prototype.clearFeThreadId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FeInfo.prototype.hasFeThreadId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 fe_ucid = 4;
 * @return {string}
 */
proto.FeInfo.prototype.getFeUcid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/** @param {string} value */
proto.FeInfo.prototype.setFeUcid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.FeInfo.prototype.clearFeUcid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FeInfo.prototype.hasFeUcid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 fe_sid = 5;
 * @return {string}
 */
proto.FeInfo.prototype.getFeSid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/** @param {string} value */
proto.FeInfo.prototype.setFeSid = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.FeInfo.prototype.clearFeSid = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FeInfo.prototype.hasFeSid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 fe_seqno = 6;
 * @return {string}
 */
proto.FeInfo.prototype.getFeSeqno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "0"));
};


/** @param {string} value */
proto.FeInfo.prototype.setFeSeqno = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.FeInfo.prototype.clearFeSeqno = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FeInfo.prototype.hasFeSeqno = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * @enum {number}
 */
proto.ErrorCode = {
  OK: 0,
  INTERNAL_ERROR: 1
};

/**
 * @enum {number}
 */
proto.MIMC_MSG_TYPE = {
  P2P_MESSAGE: 1,
  P2T_MESSAGE: 2,
  SEQUENCE_ACK: 3,
  PACKET_ACK: 4,
  PULL: 5,
  COMPOUND: 6,
  RTS_SIGNAL: 7,
  UC_PACKET: 8,
  P2P_PUSH_MESSAGE: 9,
  P2T_PUSH_MESSAGE: 10
};

/**
 * @enum {number}
 */
proto.UC_MSG_TYPE = {
  PING: 1,
  PONG: 2,
  JOIN: 3,
  JOIN_RESP: 4,
  QUIT: 5,
  QUIT_RESP: 6,
  SEQ_ACK: 7,
  MESSAGE: 8,
  MESSAGE_LIST: 9,
  DISMISS: 10,
  QUERY_ONLINE_USERS: 11,
  QUERY_ONLINE_USERS_RESP: 12
};

