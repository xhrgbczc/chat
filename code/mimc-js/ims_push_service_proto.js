/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.ims.ClientHeader');
goog.provide('proto.ims.ClientHeader.MSG_DIR_FLAG');
goog.provide('proto.ims.XMMsgBind');
goog.provide('proto.ims.XMMsgBindResp');
goog.provide('proto.ims.XMMsgConn');
goog.provide('proto.ims.XMMsgConnResp');
goog.provide('proto.ims.XMMsgNotify');
goog.provide('proto.ims.XMMsgPing');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.protocol.PushServiceConfigMsg');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ims.ClientHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ims.ClientHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ims.ClientHeader.displayName = 'proto.ims.ClientHeader';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ims.ClientHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.ims.ClientHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ims.ClientHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ims.ClientHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    chid: jspb.Message.getField(msg, 1),
    uuid: jspb.Message.getField(msg, 2),
    server: jspb.Message.getField(msg, 3),
    resource: jspb.Message.getField(msg, 4),
    cmd: jspb.Message.getField(msg, 5),
    subcmd: jspb.Message.getField(msg, 6),
    id: jspb.Message.getField(msg, 7),
    dirFlag: jspb.Message.getField(msg, 8),
    cipher: jspb.Message.getField(msg, 9),
    errCode: jspb.Message.getField(msg, 10),
    errStr: jspb.Message.getField(msg, 11)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ims.ClientHeader}
 */
proto.ims.ClientHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ims.ClientHeader;
  return proto.ims.ClientHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ims.ClientHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ims.ClientHeader}
 */
proto.ims.ClientHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServer(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setResource(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCmd(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubcmd(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 8:
      var value = /** @type {!proto.ims.ClientHeader.MSG_DIR_FLAG} */ (reader.readEnum());
      msg.setDirFlag(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCipher(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrCode(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrStr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ims.ClientHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ims.ClientHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ims.ClientHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ims.ClientHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {!proto.ims.ClientHeader.MSG_DIR_FLAG} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ims.ClientHeader.MSG_DIR_FLAG = {
  CS_ONEWAY: 1,
  CS_REQ: 2,
  CS_RESP: 3,
  SC_ONEWAY: 4,
  SC_REQ: 5,
  SC_RESP: 6
};

/**
 * optional int32 chid = 1;
 * @return {number}
 */
proto.ims.ClientHeader.prototype.getChid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ims.ClientHeader.prototype.setChid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ims.ClientHeader.prototype.clearChid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.ClientHeader.prototype.hasChid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 uuid = 2;
 * @return {string}
 */
proto.ims.ClientHeader.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.ims.ClientHeader.prototype.setUuid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ims.ClientHeader.prototype.clearUuid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.ClientHeader.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string server = 3;
 * @return {string}
 */
proto.ims.ClientHeader.prototype.getServer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ims.ClientHeader.prototype.setServer = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.ims.ClientHeader.prototype.clearServer = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.ClientHeader.prototype.hasServer = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string resource = 4;
 * @return {string}
 */
proto.ims.ClientHeader.prototype.getResource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ims.ClientHeader.prototype.setResource = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.ims.ClientHeader.prototype.clearResource = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.ClientHeader.prototype.hasResource = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string cmd = 5;
 * @return {string}
 */
proto.ims.ClientHeader.prototype.getCmd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.ims.ClientHeader.prototype.setCmd = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.ims.ClientHeader.prototype.clearCmd = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.ClientHeader.prototype.hasCmd = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string subcmd = 6;
 * @return {string}
 */
proto.ims.ClientHeader.prototype.getSubcmd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.ims.ClientHeader.prototype.setSubcmd = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.ims.ClientHeader.prototype.clearSubcmd = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.ClientHeader.prototype.hasSubcmd = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string id = 7;
 * @return {string}
 */
proto.ims.ClientHeader.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.ims.ClientHeader.prototype.setId = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.ims.ClientHeader.prototype.clearId = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.ClientHeader.prototype.hasId = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional MSG_DIR_FLAG dir_flag = 8;
 * @return {!proto.ims.ClientHeader.MSG_DIR_FLAG}
 */
proto.ims.ClientHeader.prototype.getDirFlag = function() {
  return /** @type {!proto.ims.ClientHeader.MSG_DIR_FLAG} */ (jspb.Message.getFieldWithDefault(this, 8, 1));
};


/** @param {!proto.ims.ClientHeader.MSG_DIR_FLAG} value */
proto.ims.ClientHeader.prototype.setDirFlag = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.ims.ClientHeader.prototype.clearDirFlag = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.ClientHeader.prototype.hasDirFlag = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 cipher = 9;
 * @return {number}
 */
proto.ims.ClientHeader.prototype.getCipher = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.ims.ClientHeader.prototype.setCipher = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.ims.ClientHeader.prototype.clearCipher = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.ClientHeader.prototype.hasCipher = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int32 err_code = 10;
 * @return {number}
 */
proto.ims.ClientHeader.prototype.getErrCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.ims.ClientHeader.prototype.setErrCode = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.ims.ClientHeader.prototype.clearErrCode = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.ClientHeader.prototype.hasErrCode = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string err_str = 11;
 * @return {string}
 */
proto.ims.ClientHeader.prototype.getErrStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.ims.ClientHeader.prototype.setErrStr = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.ims.ClientHeader.prototype.clearErrStr = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.ClientHeader.prototype.hasErrStr = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ims.XMMsgConn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ims.XMMsgConn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ims.XMMsgConn.displayName = 'proto.ims.XMMsgConn';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ims.XMMsgConn.prototype.toObject = function(opt_includeInstance) {
  return proto.ims.XMMsgConn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ims.XMMsgConn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ims.XMMsgConn.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getField(msg, 1),
    model: jspb.Message.getField(msg, 2),
    os: jspb.Message.getField(msg, 3),
    udid: jspb.Message.getField(msg, 4),
    sdk: jspb.Message.getField(msg, 5),
    connpt: jspb.Message.getField(msg, 6),
    host: jspb.Message.getField(msg, 7),
    locale: jspb.Message.getField(msg, 8),
    psc: (f = msg.getPsc()) && proto.protocol.PushServiceConfigMsg.toObject(includeInstance, f),
    andver: jspb.Message.getField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ims.XMMsgConn}
 */
proto.ims.XMMsgConn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ims.XMMsgConn;
  return proto.ims.XMMsgConn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ims.XMMsgConn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ims.XMMsgConn}
 */
proto.ims.XMMsgConn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOs(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUdid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSdk(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnpt(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocale(value);
      break;
    case 9:
      var value = new proto.protocol.PushServiceConfigMsg;
      reader.readMessage(value,proto.protocol.PushServiceConfigMsg.deserializeBinaryFromReader);
      msg.setPsc(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAndver(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ims.XMMsgConn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ims.XMMsgConn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ims.XMMsgConn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ims.XMMsgConn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPsc();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.protocol.PushServiceConfigMsg.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
};


/**
 * optional uint32 version = 1;
 * @return {number}
 */
proto.ims.XMMsgConn.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ims.XMMsgConn.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ims.XMMsgConn.prototype.clearVersion = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgConn.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string model = 2;
 * @return {string}
 */
proto.ims.XMMsgConn.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ims.XMMsgConn.prototype.setModel = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ims.XMMsgConn.prototype.clearModel = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgConn.prototype.hasModel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string os = 3;
 * @return {string}
 */
proto.ims.XMMsgConn.prototype.getOs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ims.XMMsgConn.prototype.setOs = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.ims.XMMsgConn.prototype.clearOs = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgConn.prototype.hasOs = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string udid = 4;
 * @return {string}
 */
proto.ims.XMMsgConn.prototype.getUdid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ims.XMMsgConn.prototype.setUdid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.ims.XMMsgConn.prototype.clearUdid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgConn.prototype.hasUdid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 sdk = 5;
 * @return {number}
 */
proto.ims.XMMsgConn.prototype.getSdk = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ims.XMMsgConn.prototype.setSdk = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.ims.XMMsgConn.prototype.clearSdk = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgConn.prototype.hasSdk = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string connpt = 6;
 * @return {string}
 */
proto.ims.XMMsgConn.prototype.getConnpt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.ims.XMMsgConn.prototype.setConnpt = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.ims.XMMsgConn.prototype.clearConnpt = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgConn.prototype.hasConnpt = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string host = 7;
 * @return {string}
 */
proto.ims.XMMsgConn.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.ims.XMMsgConn.prototype.setHost = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.ims.XMMsgConn.prototype.clearHost = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgConn.prototype.hasHost = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string locale = 8;
 * @return {string}
 */
proto.ims.XMMsgConn.prototype.getLocale = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.ims.XMMsgConn.prototype.setLocale = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.ims.XMMsgConn.prototype.clearLocale = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgConn.prototype.hasLocale = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional protocol.PushServiceConfigMsg psc = 9;
 * @return {?proto.protocol.PushServiceConfigMsg}
 */
proto.ims.XMMsgConn.prototype.getPsc = function() {
  return /** @type{?proto.protocol.PushServiceConfigMsg} */ (
    jspb.Message.getWrapperField(this, proto.protocol.PushServiceConfigMsg, 9));
};


/** @param {?proto.protocol.PushServiceConfigMsg|undefined} value */
proto.ims.XMMsgConn.prototype.setPsc = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.ims.XMMsgConn.prototype.clearPsc = function() {
  this.setPsc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgConn.prototype.hasPsc = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int32 andver = 10;
 * @return {number}
 */
proto.ims.XMMsgConn.prototype.getAndver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.ims.XMMsgConn.prototype.setAndver = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.ims.XMMsgConn.prototype.clearAndver = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgConn.prototype.hasAndver = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ims.XMMsgConnResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ims.XMMsgConnResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ims.XMMsgConnResp.displayName = 'proto.ims.XMMsgConnResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ims.XMMsgConnResp.prototype.toObject = function(opt_includeInstance) {
  return proto.ims.XMMsgConnResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ims.XMMsgConnResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ims.XMMsgConnResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    challenge: jspb.Message.getField(msg, 1),
    host: jspb.Message.getField(msg, 2),
    psc: (f = msg.getPsc()) && proto.protocol.PushServiceConfigMsg.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ims.XMMsgConnResp}
 */
proto.ims.XMMsgConnResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ims.XMMsgConnResp;
  return proto.ims.XMMsgConnResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ims.XMMsgConnResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ims.XMMsgConnResp}
 */
proto.ims.XMMsgConnResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChallenge(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 3:
      var value = new proto.protocol.PushServiceConfigMsg;
      reader.readMessage(value,proto.protocol.PushServiceConfigMsg.deserializeBinaryFromReader);
      msg.setPsc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ims.XMMsgConnResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ims.XMMsgConnResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ims.XMMsgConnResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ims.XMMsgConnResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPsc();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protocol.PushServiceConfigMsg.serializeBinaryToWriter
    );
  }
};


/**
 * optional string challenge = 1;
 * @return {string}
 */
proto.ims.XMMsgConnResp.prototype.getChallenge = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ims.XMMsgConnResp.prototype.setChallenge = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ims.XMMsgConnResp.prototype.clearChallenge = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgConnResp.prototype.hasChallenge = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string host = 2;
 * @return {string}
 */
proto.ims.XMMsgConnResp.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ims.XMMsgConnResp.prototype.setHost = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ims.XMMsgConnResp.prototype.clearHost = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgConnResp.prototype.hasHost = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional protocol.PushServiceConfigMsg psc = 3;
 * @return {?proto.protocol.PushServiceConfigMsg}
 */
proto.ims.XMMsgConnResp.prototype.getPsc = function() {
  return /** @type{?proto.protocol.PushServiceConfigMsg} */ (
    jspb.Message.getWrapperField(this, proto.protocol.PushServiceConfigMsg, 3));
};


/** @param {?proto.protocol.PushServiceConfigMsg|undefined} value */
proto.ims.XMMsgConnResp.prototype.setPsc = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.ims.XMMsgConnResp.prototype.clearPsc = function() {
  this.setPsc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgConnResp.prototype.hasPsc = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ims.XMMsgBind = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ims.XMMsgBind, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ims.XMMsgBind.displayName = 'proto.ims.XMMsgBind';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ims.XMMsgBind.prototype.toObject = function(opt_includeInstance) {
  return proto.ims.XMMsgBind.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ims.XMMsgBind} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ims.XMMsgBind.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getField(msg, 1),
    kick: jspb.Message.getField(msg, 2),
    method: jspb.Message.getField(msg, 3),
    clientAttrs: jspb.Message.getField(msg, 4),
    cloudAttrs: jspb.Message.getField(msg, 5),
    sig: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ims.XMMsgBind}
 */
proto.ims.XMMsgBind.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ims.XMMsgBind;
  return proto.ims.XMMsgBind.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ims.XMMsgBind} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ims.XMMsgBind}
 */
proto.ims.XMMsgBind.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKick(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientAttrs(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCloudAttrs(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ims.XMMsgBind.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ims.XMMsgBind.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ims.XMMsgBind} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ims.XMMsgBind.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.ims.XMMsgBind.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ims.XMMsgBind.prototype.setToken = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ims.XMMsgBind.prototype.clearToken = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgBind.prototype.hasToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string kick = 2;
 * @return {string}
 */
proto.ims.XMMsgBind.prototype.getKick = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ims.XMMsgBind.prototype.setKick = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ims.XMMsgBind.prototype.clearKick = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgBind.prototype.hasKick = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string method = 3;
 * @return {string}
 */
proto.ims.XMMsgBind.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ims.XMMsgBind.prototype.setMethod = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.ims.XMMsgBind.prototype.clearMethod = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgBind.prototype.hasMethod = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string client_attrs = 4;
 * @return {string}
 */
proto.ims.XMMsgBind.prototype.getClientAttrs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ims.XMMsgBind.prototype.setClientAttrs = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.ims.XMMsgBind.prototype.clearClientAttrs = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgBind.prototype.hasClientAttrs = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string cloud_attrs = 5;
 * @return {string}
 */
proto.ims.XMMsgBind.prototype.getCloudAttrs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.ims.XMMsgBind.prototype.setCloudAttrs = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.ims.XMMsgBind.prototype.clearCloudAttrs = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgBind.prototype.hasCloudAttrs = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string sig = 6;
 * @return {string}
 */
proto.ims.XMMsgBind.prototype.getSig = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.ims.XMMsgBind.prototype.setSig = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.ims.XMMsgBind.prototype.clearSig = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgBind.prototype.hasSig = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ims.XMMsgBindResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ims.XMMsgBindResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ims.XMMsgBindResp.displayName = 'proto.ims.XMMsgBindResp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ims.XMMsgBindResp.prototype.toObject = function(opt_includeInstance) {
  return proto.ims.XMMsgBindResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ims.XMMsgBindResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ims.XMMsgBindResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getField(msg, 1),
    errorType: jspb.Message.getField(msg, 2),
    errorReason: jspb.Message.getField(msg, 3),
    errorDesc: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ims.XMMsgBindResp}
 */
proto.ims.XMMsgBindResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ims.XMMsgBindResp;
  return proto.ims.XMMsgBindResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ims.XMMsgBindResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ims.XMMsgBindResp}
 */
proto.ims.XMMsgBindResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorReason(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorDesc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ims.XMMsgBindResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ims.XMMsgBindResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ims.XMMsgBindResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ims.XMMsgBindResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bool result = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ims.XMMsgBindResp.prototype.getResult = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.ims.XMMsgBindResp.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ims.XMMsgBindResp.prototype.clearResult = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgBindResp.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string error_type = 2;
 * @return {string}
 */
proto.ims.XMMsgBindResp.prototype.getErrorType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ims.XMMsgBindResp.prototype.setErrorType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ims.XMMsgBindResp.prototype.clearErrorType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgBindResp.prototype.hasErrorType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string error_reason = 3;
 * @return {string}
 */
proto.ims.XMMsgBindResp.prototype.getErrorReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ims.XMMsgBindResp.prototype.setErrorReason = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.ims.XMMsgBindResp.prototype.clearErrorReason = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgBindResp.prototype.hasErrorReason = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string error_desc = 4;
 * @return {string}
 */
proto.ims.XMMsgBindResp.prototype.getErrorDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ims.XMMsgBindResp.prototype.setErrorDesc = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.ims.XMMsgBindResp.prototype.clearErrorDesc = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgBindResp.prototype.hasErrorDesc = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ims.XMMsgPing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ims.XMMsgPing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ims.XMMsgPing.displayName = 'proto.ims.XMMsgPing';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ims.XMMsgPing.prototype.toObject = function(opt_includeInstance) {
  return proto.ims.XMMsgPing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ims.XMMsgPing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ims.XMMsgPing.toObject = function(includeInstance, msg) {
  var f, obj = {
    stats: msg.getStats_asB64(),
    psc: (f = msg.getPsc()) && proto.protocol.PushServiceConfigMsg.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ims.XMMsgPing}
 */
proto.ims.XMMsgPing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ims.XMMsgPing;
  return proto.ims.XMMsgPing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ims.XMMsgPing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ims.XMMsgPing}
 */
proto.ims.XMMsgPing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStats(value);
      break;
    case 2:
      var value = new proto.protocol.PushServiceConfigMsg;
      reader.readMessage(value,proto.protocol.PushServiceConfigMsg.deserializeBinaryFromReader);
      msg.setPsc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ims.XMMsgPing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ims.XMMsgPing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ims.XMMsgPing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ims.XMMsgPing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPsc();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protocol.PushServiceConfigMsg.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes stats = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ims.XMMsgPing.prototype.getStats = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes stats = 1;
 * This is a type-conversion wrapper around `getStats()`
 * @return {string}
 */
proto.ims.XMMsgPing.prototype.getStats_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStats()));
};


/**
 * optional bytes stats = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStats()`
 * @return {!Uint8Array}
 */
proto.ims.XMMsgPing.prototype.getStats_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStats()));
};


/** @param {!(string|Uint8Array)} value */
proto.ims.XMMsgPing.prototype.setStats = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ims.XMMsgPing.prototype.clearStats = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgPing.prototype.hasStats = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional protocol.PushServiceConfigMsg psc = 2;
 * @return {?proto.protocol.PushServiceConfigMsg}
 */
proto.ims.XMMsgPing.prototype.getPsc = function() {
  return /** @type{?proto.protocol.PushServiceConfigMsg} */ (
    jspb.Message.getWrapperField(this, proto.protocol.PushServiceConfigMsg, 2));
};


/** @param {?proto.protocol.PushServiceConfigMsg|undefined} value */
proto.ims.XMMsgPing.prototype.setPsc = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ims.XMMsgPing.prototype.clearPsc = function() {
  this.setPsc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgPing.prototype.hasPsc = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ims.XMMsgNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ims.XMMsgNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ims.XMMsgNotify.displayName = 'proto.ims.XMMsgNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ims.XMMsgNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.ims.XMMsgNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ims.XMMsgNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ims.XMMsgNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    errCode: jspb.Message.getField(msg, 1),
    errStr: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ims.XMMsgNotify}
 */
proto.ims.XMMsgNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ims.XMMsgNotify;
  return proto.ims.XMMsgNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ims.XMMsgNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ims.XMMsgNotify}
 */
proto.ims.XMMsgNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrStr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ims.XMMsgNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ims.XMMsgNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ims.XMMsgNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ims.XMMsgNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 err_code = 1;
 * @return {number}
 */
proto.ims.XMMsgNotify.prototype.getErrCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ims.XMMsgNotify.prototype.setErrCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.ims.XMMsgNotify.prototype.clearErrCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgNotify.prototype.hasErrCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string err_str = 2;
 * @return {string}
 */
proto.ims.XMMsgNotify.prototype.getErrStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ims.XMMsgNotify.prototype.setErrStr = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.ims.XMMsgNotify.prototype.clearErrStr = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ims.XMMsgNotify.prototype.hasErrStr = function() {
  return jspb.Message.getField(this, 2) != null;
};


